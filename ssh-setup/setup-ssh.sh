#!/bin/bash

# SSH Key Generation and Setup Script
# This script generates SSH keys and configures them for secure Git operations

set -e  # Exit on any error

echo "🔐 Starting SSH key generation and setup..."

# Configuration
SSH_DIR="$HOME/.ssh"
SSH_KEY_TYPE="ed25519"  # More secure and faster than RSA
SSH_KEY_COMMENT=""
SSH_KEY_NAME="id_${SSH_KEY_TYPE}"
GITHUB_SSH_KEY_NAME="github_${SSH_KEY_TYPE}"
GITLAB_SSH_KEY_NAME="gitlab_${SSH_KEY_TYPE}"

# Create .ssh directory if it doesn't exist
if [ ! -d "$SSH_DIR" ]; then
    echo "📁 Creating .ssh directory..."
    mkdir -p "$SSH_DIR"
    chmod 700 "$SSH_DIR"
fi

# Function to generate SSH key
generate_ssh_key() {
    local key_name="$1"
    local key_comment="$2"
    local key_path="$SSH_DIR/$key_name"

    if [ -f "$key_path" ]; then
        echo "✅ SSH key $key_name already exists"
        return 0
    fi

    echo "🔑 Generating SSH key: $key_name"
    ssh-keygen -t "$SSH_KEY_TYPE" -f "$key_path" -C "$key_comment" -N ""

    # Set proper permissions
    chmod 600 "$key_path"
    chmod 644 "$key_path.pub"

    echo "✅ SSH key generated: $key_path"
}

# Get user email for key comment
echo "📧 Please provide your email for SSH key identification:"
if command -v git >/dev/null 2>&1; then
    GIT_EMAIL=$(git config --global user.email 2>/dev/null || echo "")
    if [ -n "$GIT_EMAIL" ]; then
        echo "Found Git email: $GIT_EMAIL"
        read -p "Use this email for SSH key? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            SSH_KEY_COMMENT="$GIT_EMAIL"
        fi
    fi
fi

if [ -z "$SSH_KEY_COMMENT" ]; then
    read -p "Enter your email address: " SSH_KEY_COMMENT
fi

echo "📋 SSH Key Generation Options:"
echo "1. Generate default SSH key (recommended)"
echo "2. Generate platform-specific keys (GitHub, GitLab, etc.)"
echo "3. Generate both default and platform-specific keys"

read -p "Choose an option (1-3): " -n 1 -r
echo

case $REPLY in
    1)
        # Generate default key
        generate_ssh_key "$SSH_KEY_NAME" "$SSH_KEY_COMMENT"
        ;;
    2)
        # Generate platform-specific keys
        echo "🌐 Generating platform-specific SSH keys..."
        generate_ssh_key "$GITHUB_SSH_KEY_NAME" "$SSH_KEY_COMMENT"
        generate_ssh_key "$GITLAB_SSH_KEY_NAME" "$SSH_KEY_COMMENT"
        ;;
    3)
        # Generate both
        generate_ssh_key "$SSH_KEY_NAME" "$SSH_KEY_COMMENT"
        generate_ssh_key "$GITHUB_SSH_KEY_NAME" "$SSH_KEY_COMMENT"
        generate_ssh_key "$GITLAB_SSH_KEY_NAME" "$SSH_KEY_COMMENT"
        ;;
    *)
        echo "❌ Invalid option. Generating default key..."
        generate_ssh_key "$SSH_KEY_NAME" "$SSH_KEY_COMMENT"
        ;;
esac

# Start SSH agent and add keys
echo "🔄 Starting SSH agent and adding keys..."

# Start SSH agent if not running
if [ -z "$SSH_AUTH_SOCK" ]; then
    eval "$(ssh-agent -s)"
fi

# Add keys to SSH agent
for key_file in "$SSH_DIR"/id_* "$SSH_DIR"/github_* "$SSH_DIR"/gitlab_*; do
    if [ -f "$key_file" ] && [[ "$key_file" != *.pub ]]; then
        echo "🔑 Adding key to SSH agent: $(basename "$key_file")"
        ssh-add "$key_file"
    fi
done

# Configure SSH config file
echo "🔧 Configuring SSH config..."
SSH_CONFIG="$SSH_DIR/config"

# Backup existing config
if [ -f "$SSH_CONFIG" ]; then
    cp "$SSH_CONFIG" "$SSH_CONFIG.backup.$(date +%Y%m%d_%H%M%S)"
fi

# Create or update SSH config
cat > "$SSH_CONFIG" << EOF
# SSH Configuration
# Generated by macOS setup script

# Default settings
Host *
    AddKeysToAgent yes
    UseKeychain yes
    IdentitiesOnly yes
    ServerAliveInterval 60
    ServerAliveCountMax 30

EOF

# Add host-specific configurations if platform keys exist
if [ -f "$SSH_DIR/$GITHUB_SSH_KEY_NAME" ]; then
    cat >> "$SSH_CONFIG" << EOF
# GitHub
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/$GITHUB_SSH_KEY_NAME

EOF
fi

if [ -f "$SSH_DIR/$GITLAB_SSH_KEY_NAME" ]; then
    cat >> "$SSH_CONFIG" << EOF
# GitLab
Host gitlab.com
    HostName gitlab.com
    User git
    IdentityFile ~/.ssh/$GITLAB_SSH_KEY_NAME

EOF
fi

# Add default key configuration
if [ -f "$SSH_DIR/$SSH_KEY_NAME" ]; then
    cat >> "$SSH_CONFIG" << EOF
# Default Git hosting (fallback)
Host *
    IdentityFile ~/.ssh/$SSH_KEY_NAME

EOF
fi

# Set proper permissions for config
chmod 600 "$SSH_CONFIG"

echo "✅ SSH configuration completed!"

# Display public keys
echo ""
echo "📋 Your SSH Public Keys:"
echo "=========================="

for pub_key in "$SSH_DIR"/*.pub; do
    if [ -f "$pub_key" ]; then
        echo ""
        echo "🔑 $(basename "$pub_key"):"
        echo "---"
        cat "$pub_key"
        echo "---"
    fi
done

echo ""
echo "📋 SSH Agent Status:"
ssh-add -l

# Instructions for adding keys to platforms
echo ""
echo "🎉 SSH setup complete!"
echo ""
echo "📝 Next Steps:"
echo "=============="
echo ""
echo "1. Copy the appropriate public key(s) above"
echo "2. Add them to your Git hosting platforms:"
echo ""

if [ -f "$SSH_DIR/$GITHUB_SSH_KEY_NAME.pub" ]; then
    echo "   🐙 GitHub:"
    echo "      - Go to: https://github.com/settings/ssh"
    echo "      - Click 'New SSH key'"
    echo "      - Paste the content of: $GITHUB_SSH_KEY_NAME.pub"
    echo ""
fi

if [ -f "$SSH_DIR/$GITLAB_SSH_KEY_NAME.pub" ]; then
    echo "   🦊 GitLab:"
    echo "      - Go to: https://gitlab.com/-/profile/keys"
    echo "      - Click 'Add SSH key'"
    echo "      - Paste the content of: $GITLAB_SSH_KEY_NAME.pub"
    echo ""
fi

if [ -f "$SSH_DIR/$SSH_KEY_NAME.pub" ]; then
    echo "   🔑 For other platforms, use the default key:"
    echo "      - Key file: $SSH_KEY_NAME.pub"
    echo ""
fi

echo "3. Test your SSH connection:"
if [ -f "$SSH_DIR/$GITHUB_SSH_KEY_NAME" ]; then
    echo "   ssh -T git@github.com"
fi
if [ -f "$SSH_DIR/$GITLAB_SSH_KEY_NAME" ]; then
    echo "   ssh -T git@gitlab.com"
fi

echo ""
echo "💡 Tips:"
echo "   - SSH keys are stored in: $SSH_DIR"
echo "   - SSH config is at: $SSH_CONFIG"
echo "   - To copy a public key: pbcopy < ~/.ssh/id_ed25519.pub"
echo "   - To test SSH: ssh -T git@github.com"
echo ""
echo "🔐 Your SSH keys are now ready for secure Git operations!"
